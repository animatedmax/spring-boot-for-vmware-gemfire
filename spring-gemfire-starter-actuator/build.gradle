plugins {
    id 'java-library'
    id 'dependency-constraints'
    id 'gemfire-repo-artifact-publishing'
    id 'spring-java-jar'
}

project.ext.set("pomProjectLongName","Spring Boot Actuator Starter for VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-boot-actuator-2.6-gemfire-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription","Spring Boot Actuator Starter for VMware GemFire")

dependencies {
    api project(":spring-gemfire-starter")
    api project(":spring-gemfire-actuator-autoconfigure")
}

sourceSets {
    test {
        java {
            srcDir file('src/test/java')
            srcDir file('src/sbdg-test-read-only/java')
        }
        resources {
            srcDir file('src/test/resources')
            srcDir file('src/sbdg-test-read-only/resources')
        }
    }
}

task cleanSpringTestClasses(type:Exec)
{
    commandLine 'rm', '-rf', "${project.projectDir}/src/sbdg-test-read-only"
}

clean{
    dependsOn("cleanSpringTestClasses")
}

test{
    dependsOn(":spring-gemfire-starter:test")
}

repositories {
    def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
    if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
        additionalMavenRepoURLs.split(",").each {
            project.getRepositories()
                    .maven(mavenRepository -> {
                        mavenRepository.setUrl(uri(it.toString()));
                    });
        }
    }
}
