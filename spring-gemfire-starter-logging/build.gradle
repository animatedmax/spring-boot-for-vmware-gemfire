plugins {
    id 'java-library'
    id 'dependency-constraints'
    id 'gemfire-repo-artifact-publishing'
    id 'spring-java-jar'
}

project.ext.set("pomProjectLongName","Spring Boot Logging Starter for VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-boot-logging-2.6-gemfire-${gemfireBaseVersion}")
project.ext.set("pomProjectDescription","Spring Boot Logging Starter for VMware GemFire with Logback as the logging provider and adaptation of Log4j to SLF4J")


dependencies {
    api "org.springframework.geode:spring-geode-starter-logging:$springBootDataGeodeVersion"
    testImplementation "org.springframework.geode:spring-geode-starter-test:$springBootDataGeodeVersion"
}

sourceSets {
    test {
        java {
            srcDir file('src/test/java')
            srcDir file('src/sbdg-test-read-only/java')
        }
        resources {
            srcDir file('src/test/resources')
            srcDir file('src/sbdg-test-read-only/resources')
        }
    }
}

task cleanSpringTestClasses(type:Exec)
{
    commandLine 'rm', '-rf', "${project.projectDir}/src/sbdg-test-read-only"
}

clean{
    dependsOn("cleanSpringTestClasses")
}

test{
    dependsOn(":spring-gemfire-starter:test")
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}
